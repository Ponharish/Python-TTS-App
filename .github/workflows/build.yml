name: Cross-platform Build with PyInstaller

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    # Install FFmpeg on Linux (Ubuntu)
    - name: Install FFmpeg (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    # Install FFmpeg on macOS
    - name: Install FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg
    
    # Install Chocolatey on Windows (if not already installed)
    - name: Install Chocolatey (Windows)
      if: runner.os == 'Windows'
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    # Install FFmpeg on Windows
    - name: Install FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg

    # Build executable
    - name: Build executable
      run: |
        if [ "${{ runner.os }}" == "macos-latest" ]; then
          pyinstaller --onefile --windowed --add-binary "./ffmpeg/ffmpeg:ffmpeg" "Python_TTS.py"
        elif [ "${{ runner.os }}" == "linux-latest" ]; then
          pyinstaller --onefile --windowed --add-binary "./ffmpeg/ffmpeg:ffmpeg" "Python_TTS.py"
        elif [ "${{ runner.os }}" == "windows-latest" ]; then
          pyinstaller --onefile --windowed --add-binary "./ffmpeg/ffmpeg.exe;ffmpeg.exe" "Python_TTS.py"
        fi

    - name: Rename output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Move-Item "dist\Python_TTS.exe" "dist\app-windows.exe"

    - name: Rename output (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mv "dist/Python_TTS" "dist/app-${{ matrix.os }}"

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.os }}
        path: dist/
